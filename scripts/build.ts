import { basename, resolve } from 'path';
import { writeFileSync, readFileSync, existsSync } from 'fs';
import { ITiddlerFields } from 'tw5-typed';
import { minify as htmlMinify } from 'html-minifier-terser';
import { rebuild } from './packup';
import { tiddlywiki, mkdirsForFileSync } from './utils';

const sleep = (millionseconds: number) =>
  new Promise<void>(resolve => setTimeout(() => resolve(), millionseconds));

const waitForFile = (path: string) =>
  new Promise<void>(resolve => {
    const id = setInterval(() => {
      resolve();
      if (existsSync(path)) {
        resolve();
        clearInterval(id);
      }
    }, 100);
  });

export const build = async () => {
  const $tw = tiddlywiki();
  const plugins = await rebuild($tw, 'src', undefined, true);
  plugins.forEach(plugin => {
    const pluginTiddlerName = `${basename(
      ($tw.utils as any).generateTiddlerFilepath(plugin.title, {}),
    )}.json`;
    const path = resolve('dist', pluginTiddlerName);
    mkdirsForFileSync(path);
    writeFileSync(path, JSON.stringify(plugin));
  });
  return plugins;
};

export const buildLibrary = async () => {
  const $tw = tiddlywiki();
  const plugins: Record<string, ITiddlerFields> = {};
  (await rebuild($tw, 'src', undefined, true)).forEach(
    plugin => (plugins[plugin.title] = plugin),
  );
  const pluginPath = ($tw as any).getLibraryItemSearchPaths(
    $tw.config.pluginsPath,
  );
  tiddlywiki(
    [
      /* 收集所有已安装插件 */
      {
        title: '$:/UpgradeLibrary',
        type: 'application/json',
        'plugin-type': 'library',
        text: JSON.stringify({ tiddlers: plugins }),
      },
      ...[
        'tiddlywiki/filesystem',
        'tiddlywiki/tiddlyweb',
        'tiddlywiki/pluginlibrary',
      ].map(pluginName =>
        ($tw as any).loadPluginFolder(
          ($tw as any).findLibraryItem(pluginName, pluginPath),
        ),
      ),
    ],
    'wiki',
    [
      ...['--output', resolve('dist/library')] /* 指定输出路径 */,
      ...[
        '--savelibrarytiddlers',
        '$:/UpgradeLibrary',
        '',
        'recipes/library/tiddlers/',
        '$:/UpgradeLibrary/List',
      ] /* 导出指定的插件 */,
      ...[
        '--savetiddler',
        '$:/UpgradeLibrary/List',
        'recipes/library/tiddlers.json',
      ] /* 生成插件集合JSON文件 */,
      ...[
        '--rendertiddler',
        '$:/plugins/tiddlywiki/pluginlibrary/library.template.html',
        'index.html',
        'text/plain',
      ] /* 生成插件库HTML文件 */,
      ...[
        '--deletetiddlers',
        '[[$:/UpgradeLibrary]] [[$:/UpgradeLibrary/List]]',
      ] /* 删掉中间内容 */,
    ],
  );

  // 最小化：HTML
  const HTMLPath = resolve('dist/library', 'index.html');
  // index.html 的生成是异步而无法控制，很烦
  await waitForFile(HTMLPath);
  const result = await htmlMinify(readFileSync(HTMLPath).toString('utf-8'), {
    caseSensitive: true,
    collapseBooleanAttributes: false,
    collapseInlineTagWhitespace: false,
    collapseWhitespace: true,
    conservativeCollapse: true,
    continueOnParseError: true,
    customAttrCollapse: /.*/,
    decodeEntities: true,
    html5: true,
    ignoreCustomFragments: [/<#[\s\S]*?#>/, /<%[\s\S]*?%>/, /<\?[\s\S]*?\?>/],
    includeAutoGeneratedTags: false,
    keepClosingSlash: false,
    maxLineLength: 0,
    minifyCSS: true,
    minifyJS: true,
    minifyURLs: true,
    preserveLineBreaks: false,
    preventAttributesEscaping: false,
    processConditionalComments: true,
    processScripts: ['text/html'],
    removeAttributeQuotes: true,
    removeComments: true,
    removeEmptyAttributes: true,
    removeEmptyElements: false,
    removeOptionalTags: true,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    removeTagWhitespace: true,
    sortAttributes: true,
    sortClassName: true,
    trimCustomFragments: true,
    useShortDoctype: true,
  });
  writeFileSync(HTMLPath, result);
  await sleep(1000);
};
