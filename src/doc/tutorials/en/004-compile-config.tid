title: $:/plugins/Modern.TiddlyDev/doc/tutorials/en/004-compile-config
caption: Custom compilation strategy
authors: Sttot(Gk0Wk)
type: text/vnd.tiddlywiki

Following the development specifications in the previous section allows us to easily implement <$text text="TypeScript" />, but it can also cause some problems. For example, I want to include a <$text text="TypeScript" /> script in the plugin, but don't want to compile it, or want to bring in the source file after compiling. Or, I want to specify the generation of <$text text="SourceMap" />, or enforce minimization and compatibility policies, etc. These can be achieved by modifying the fields.

!! Include entry source files

If a .meta is added to a script file it will be treated as an entry file, and the entry file will be compiled and the compiled result incorporated into the plugin and will not include the source file. If you wish to include the source file, you need to add this to the .meta file corresponding to the script file:

```yaml
Modern.TiddlyDev#IncludeSource: true
```

!! Excluding compilation

Further, if you do not want this script file to be compiled, you need to add this to the .meta:

```yaml
Modern.TiddlyDev#NoCompile: true
```

Need to be used with `Modern.TiddlyDev#IncludeSource`.

!! Plugin Minimization

By default, scripts and css files are minimized when the plugin is built (not minimized in development mode). If you wish to disable this feature, you can add this to `plugin.info`:

```json
"Modern.TiddlyDev#Minify": false,
```

Since `plugin.info` is in JSON format, pay attention to the comma and other formatting.

If you want more granular control, e.g. you don't want to minimize a certain js/css file (e.g. you import a minimized third-party library with `.min.js` suffix) but want the rest of the plugin to be minimized, set `Modern.TiddlyDev#Minify` to true in `plugin.info`, but Add the `Modern.TiddlyDev#Minify: false` field for the files you wish to exclude from minimization.

!! <$text text="SourceMap" /> Generating

By default, in-line sourcemap is added to generated scripts in dev development mode for debugging purposes, but not in publish/build production releases. If you need to add it in production please add to `plugin.info`.

```json
"Modern.TiddlyDev#SourceMap": false,
```

!! Excluding packaging

Since the `require` method in <$text text="TiddlyWiki" /> is not a standard CJS method for introducing modules, but is implemented by <$text text="TiddlyWiki" /> itself, the compilation will ignore the require introductions starting with `$:/` and leave <$text text = "TiddlyWiki" /> to perform the import operation. But if you need to use require to introduce a tiddler that doesn't start with `$:/`, it will be treated as a normal npm package and the bundle will be introduced at compile time, resulting in an error. Alternatively, your plugin runs in a node environment and does not require bundling. In both cases, you need to specify the object to exclude from bundling.

If the plugin needs to use the fs package and does not require bundling, you can specify in `plugin.info` that:

```json
"Modern.TiddlyDev#ExternalModules": "fs",
```

If, at the same time, a tiddler named `foo bar` needs to be required at runtime:

```json
"Modern.TiddlyDev#ExternalModules": "fs [[foo bar]]",
```

Note: Only the use of `[[]]` for tiddler headers with spaces is supported, but no other filter syntax is supported. However, wildcard syntax, such as `abc/*`, is supported. The specific behavior is determined by [[ESBuild|https://esbuild.github.io/api/#external]].

!! Compatibility policy

Build time will automatically use [[browserslist|https://browsersl.ist/]] for code compatibility escaping work. The default policy is `>0.25%, not ie 11, not op_mini all`. If you want to specify it yourself, you can specify it in `plugin.info`.

```json
"Modern.TiddlyDev#BrowsersList": "last 2 versions",
```
