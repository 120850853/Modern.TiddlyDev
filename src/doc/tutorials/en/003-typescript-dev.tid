title: $:/plugins/Modern.TiddlyDev/doc/tutorials/en/003-typescript-dev
caption: TypeScript Development
authors: Sttot(Gk0Wk)
type: text/vnd.tiddlywiki

If the previous steps just enhance the development experience, then the next is the core problem that this framework is trying to solve: <$text text="TiddlyWiki" /> + <$text text="TypeScript" />!

Let's go straight to the usage with an example.

! Creating a widget

A widget is a rendering unit for <$text text="TiddlyWiki" />, which is what you see as something like `<$xxx />`. <$text text="TiddlyWiki" /> has several built-in widgets that provide various functions such as text, links, images, citations, etc., and all kinds of <$text text="WikiText" /> are parsed and turned into widgets, so the widget is the most important and fundamental concept in <$text text=" TiddlyWiki" />.

Note: A tutorial on widget development will be done in the future, and anyone with knowledge is welcome for co-operation!

We want to create a wdiget that displays a random number and re-randomizes it when clicked, and we name this widget <$text text="RandomNumber" />. To achieve this, we add a `RandomNumberWidget.ts` file and a `RandomNumberWidget.ts.meta` file to the plugin development directory.

First write the following in `RandomNumberWidget.ts.meta`;

```
title: $:/plugins/<author-name>/<plugin-name>/RandomNumberWidget.ts
type: application/javascript
module-type: widget
```

Note: the `module-type` field indicates the module type of the script, which will be used when the <$text text="TiddlyWiki" /> loads the plugin.

In the `RandomNumberWidget.ts` file:

```typescript
import { IChangedTiddlers } from 'tiddlywiki';
import { widget as Widget } from '$:/core/modules/widgets/widget.js';

class ExampleWidget extends Widget {
  refresh(changedTiddlers: IChangedTiddlers) {
    return false;
  }

  render(parent: Node, nextSibling: Node) {
    this.parentDomNode = parent;
    this.execute();
    const containerElement = $tw.utils.domMaker('p', {
      text: 'This is a widget!',
    });
    this.domNodes.push(parent.appendChild(containerElement));
  }
}

exports.test = ExampleWidget;
```

Execute `pnpm run dev` to compile the source file, open a browser, create a tiddler and use `<$RandomNumber />` in it to see the effect.

Note: The framework also supports compilation of cjs, mjs, jsx, tsx files.

Note: The related <$text text="TypeScript" /> type support is done by [[tw5-typed|https://github.com/tiddly-gittly/TW5-Typed]], which is not very complete, so some manual type annotations are needed as above. I welcome your help to improve tw5-typed!

! Importing other resources in <$text text="TypeScript" /> scripts

First, if a script file (.ts, .tsx, .jsx, .cjs, .mjs) has a corresponding .meta file, then the script file is a compilation entry and will be compiled; conversely, if a script file does not have a .meta file, then it is not an entry file and will not be compiled directly and packaged into the plugin, but can be imported by other script files.

You can use `import` in the script file to introduce other resources in the directory, such as other scripts, css files, json files, images and other resources. These resources will be automatically imported and packaged during compilation.

Note: .js scripts can not be used as a compilation entry, but can be imported by other script files using import.

However, it should be noted that if a resource file has already been imported by a script file, the resource file does not need to have a .meta file, that is, it does not need to manually add to the plug-in. Otherwise, there will be two copies of the resource file in the plugin, which will cause some other problems.

Here are two examples:

Add a script file foo.ts:

```typescript
export const foo = 'foo';
```

Instead of adding the corresponding .meta file, we can just import it in `RandomNumberWidget.ts`.

Besides, we can create a `bar.css` in the same way and import it directly in `RandomNumberWidget.ts` without adding a .meta file.
