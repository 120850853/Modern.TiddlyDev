title: $:/plugins/Modern.TiddlyDev/doc/tutorials/zh/003-typescript-dev
caption: TypeScript 插件开发
authors: Sttot(Gk0Wk)
type: text/vnd.tiddlywiki

如果说前面这些只是提升了开发体验，那么接下来才是本框架要解决的核心问题：<$text text="TiddlyWiki" /> + <$text text="TypeScript" />！

我们直接用一个例子来介绍用法。

! 创建一个 Widget

widget 是 <$text text="TiddlyWiki" /> 的渲染单位，也就是你看到的诸如 `<$xxx />` 的东西。<$text text="TiddlyWiki" /> 内置了若干 widget，提供了各种功能如文字、链接、图片、引用等，而所有的 <$text text="WikiText" /> 都会在解析后变成 widget。因此 widget 是 <$text text="TiddlyWiki" /> 中最重要和基础的概念。

因此我们尝试直接创建一个属于自己的 widget。注意：widget 开发的具体教程未来会做，欢迎有相关知识的大佬帮忙编写！

我们希望创建这样一个 wdiget：其显示一个随机数字，并在点击其时重新随机，我们把这个 widget 其名为 <$text text="RandomNumber" />。为了达到这样的目的，我们在插件开发目录下添加一个 `RandomNumberWidget.ts` 文件和 `RandomNumberWidget.ts.meta` 文件。

首先在 `RandomNumberWidget.ts.meta` 中写如下内容;

```
title: $:/plugins/<作者名>/<插件名>/RandomNumberWidget.ts
type: application/javascript
module-type: widget
```

注意：module-type 字段表明该脚本的模块类型，在 <$text text="TiddlyWiki" /> 加载插件时会用到；

在 `RandomNumberWidget.ts` 文件中：

```typescript
import type { Widget as IWidget, IChangedTiddlers } from 'tiddlywiki';

// 此 require 并非 cjs 标准的 require ，而是 TiddlyWiki 导入某个 tiddler 脚本的方法；
const Widget = require('$:/core/modules/widgets/widget.js')
  .widget as typeof IWidget;

export class RandomNumber extends Widget {
  refresh(_changedTiddlers: IChangedTiddlers) {
    return false;
  }

  render(parent: Node, _nextSibling: Node) {
    this.parentDomNode = parent;
    this.execute();
    const containerElement = document.createElement('p');
    containerElement.innerHTML = `${Math.random()}`.replace('0.', '');
    containerElement.onclick = () => (containerElement.innerHTML = `${Math.random()}`.replace('0.', ''));
    this.domNodes.push(containerElement);
    parent.appendChild(containerElement);
  }
}
```

执行 `pnpm run dev` 对源文件进行编译，打开浏览器，创建一个 tiddler ，在其中使用 `<$RandomNumber />`，可以看到效果。

注：框架同时也支持对 cjs、mjs、jsx、tsx 文件的编译。

注：相关 <$text text="TypeScript" /> 类型支持是由 [[tw5-typed|https://github.com/tiddly-gittly/TW5-Typed]] 完成的，由于完成度不高，所以需要像上面一样，做一些手动的类型注解。欢迎各位大佬帮忙完善 tw5-typed ！

! 在 <$text text="TypeScript" /> 脚本中导入其他资源

首先，当一个脚本文件(.ts、.tsx、.jsx、.cjs、.mjs)有其对应的 .meta 文件时，则该脚本文件为编译入口文件，会对其进行编译；而反之，如果一个脚本文件没有 .meta 文件，则不是入口文件，不会对其进行直接编译并打包入插件，但可以被其他脚本文件导入。

在脚本文件中可以正常使用 `import` 引入目录下的其他资源文件，如其他的脚本文件、css 文件、json 文件、图片等资源。在编译时会自动引入和打包这些资源文件。

注意：js 脚本虽然不能作为入口，但是可以被其他脚本文件使用 impoer 引入。

但需要注意的是，如果一个资源文件已经被某个脚本文件 import，该资源文件就不需要再拥有 .meta 文件了，也就是不需要再主动添加到插件中。否则插件中会出现两份该资源文件，进而引发一些别的问题。

这里我们举两个例子：

添加一个脚本文件 foo.ts：

```typescript
export const foo = 'foo';
```

不要添加其对应的 .meta 文件，而是在 `RandomNumberWidget.ts` 中直接使用 import 引入之即可。

再比如，我们可以用同样的方式创建一个 `bar.css`，并在 `RandomNumberWidget.ts` 中直接使用 import 引入之，也不需要添加 .meta 文件。

! 调整编译行为

如上规范可以让我们很简便地实现 <$text text="TypeScript" />，但是也会造成一些问题。比如我希望在插件中包含一个 <$text text="TypeScript" /> 脚本，但不希望编译它，或者希望在编译之后同时引入源文件。或者，我们希望指定生成 <$text text="SourceMap" />，或者执行最小化和兼容性策略等。这些可以通过修改字段来实现：

!! 包含入口源文件

如果为一个脚本文件添加了 .meta 将会被视为入口文件，而入口文件将会被编译，并将编译后的结果纳入插件中，并不包括源文件。如果希望包含源文件，则需要在脚本文件对应的 .meta 文件中添加：

```
Modern.TiddlyDev#IncludeSource: true
```

!! 排除编译

进一步的，如果不希望编译这个脚本文件，就需要在 .meta 中添加：

```
Modern.TiddlyDev#NoCompile: true
```

需要与 `Modern.TiddlyDev#IncludeSource` 配合使用。

!! 插件最小化

默认情况下，在插件构建时会对脚本和 css 文件进行最小化(在 dev 开发模式时不会进行最小化)。如果希望停用此功能，可以在 `plugin.info` 中添加：

```json
"Modern.TiddlyDev#Minify": false,
```

由于 `plugin.info` 是 JSON 格式，注意逗号等格式。

!! <$text text="SourceMap" />

默认情况下，在 dev 开发模式下会为生成的脚本添加行内 sourcemap，以便调试，而在 publish/build 生产环境发布则不会添加。如果需要在生产环境添加请在 `plugin.info` 中添加：

```json
"Modern.TiddlyDev#SourceMap": false,
```

!! 排除打包

由于 <$text text="TiddlyWiki" /> 中的 require 并非是 CJS 标准的引入模块方法，而是 <$text text="TiddlyWiki" /> 自行实现的，因此在编译时会忽略以`$:/`开头的 require 引入，而是保留原样让 <$text text="TiddlyWiki" /> 执行引入操作。但是如果你需要使用 require 引入一个不以 `$:/` 开头的 tiddler，就会被当做是一般的 npm 包，从而在编译时进行 bundle 引入导致报错。或者，你的插件运行于 node 环境，不需要对 require 进行 bundle 。如上两种情况就需要指定需要排除打包的对象。

假如插件需要使用到 fs 这个包，且不需要进行 bundle 操作，就可以在 `plugin.info` 中指定：

```json
"Modern.TiddlyDev#ExternalModules": "fs",
```

如果同时，还需要在运行时引入一个名为 `foo bar` 的 tiddler：

```json
"Modern.TiddlyDev#ExternalModules": "fs [[foo bar]]",
```

注意：仅支持使用 `[[]]` 表示带有空格的 tiddler 标题，但不支持其他 filter 语法。但是可以支持通配符语法，例如`abc/*`。具体行为是由[[ESBuild|https://esbuild.github.io/api/#external]]决定的。

!! 兼容性策略

构建时，会自动使用 [[browserslist|https://browsersl.ist/]] 进行代码兼容性转义工作。默认的策略是 `>0.25%, not ie 11, not op_mini all`。如需自行指定，可在 `plugin.info` 中指定：

```json
"Modern.TiddlyDev#BrowsersList": "last 2 versions",
```

! 额外生成的字段

编译构建后会生成一些额外的字段：

!! 源文件路径

入口脚本文件，以及入口脚本文件直接或间接引入的文件，都会进行编译产生目标 tiddler，而这些 tiddler 会包含一个额外的字段 `Modern.TiddlyDev#Origin` 用来指明其源文件是谁。

!! 哈希校验

通过 publish/build 构建的插件，会生成哈希校验签名，哈希算法会写明，目前只有 sha256 这一种，即，最终插件的字段中会有 `Modern.TiddlyDev#SHA256-Hashed` 这一项。

校验的具体方式：读取插件，排除掉 `Modern.TiddlyDev#SHA256-Hashed` 这一项后，对整个对象的 JSON 序列化字符串进行 sha256
计算：

```js
sha256(JSON.stringify({ ...plugin, 'Modern.TiddlyDev#SHA256-Hashed': undefined }));
```
