title: $:/plugins/Modern.TiddlyDev/doc/tutorials/zh/003-typescript-dev
caption: TypeScript 插件开发
authors: Sttot(Gk0Wk)
type: text/vnd.tiddlywiki

如果说前面这些只是提升了开发体验，那么接下来才是本框架要解决的核心问题：<$text text="TiddlyWiki" /> + <$text text="TypeScript" />！

我们直接用一个例子来介绍用法。

! 创建一个 Widget

widget 是 <$text text="TiddlyWiki" /> 的渲染单位，也就是你看到的诸如 `<$xxx />` 的东西。<$text text="TiddlyWiki" /> 内置了若干 widget，提供了各种功能如文字、链接、图片、引用等，而所有的 <$text text="WikiText" /> 都会在解析后变成 widget。因此 widget 是 <$text text="TiddlyWiki" /> 中最重要和基础的概念。

因此我们尝试直接创建一个属于自己的 widget。注意：widget 开发的具体教程未来会做，欢迎有相关知识的大佬帮忙编写！

我们希望创建这样一个 wdiget：其显示一个随机数字，并在点击其时重新随机，我们把这个 widget 其名为 <$text text="RandomNumber" />。为了达到这样的目的，我们在插件开发目录下添加一个 `RandomNumberWidget.ts` 文件和 `RandomNumberWidget.ts.meta` 文件。

首先在 `RandomNumberWidget.ts.meta` 中写如下内容;

```
title: $:/plugins/<作者名>/<插件名>/RandomNumberWidget.ts
type: application/javascript
module-type: widget
```

注意：module-type 字段表明该脚本的模块类型，在 <$text text="TiddlyWiki" /> 加载插件时会用到；

在 `RandomNumberWidget.ts` 文件中：

```typescript
import { IChangedTiddlers } from 'tiddlywiki';
import { widget as Widget } from '$:/core/modules/widgets/widget.js';

class ExampleWidget extends Widget {
  refresh(changedTiddlers: IChangedTiddlers) {
    return false;
  }

  render(parent: Node, nextSibling: Node) {
    this.parentDomNode = parent;
    this.execute();
    const containerElement = $tw.utils.domMaker('p', {
      text: 'This is a widget!',
    });
    this.domNodes.push(parent.appendChild(containerElement));
  }
}

exports.test = ExampleWidget;
```

执行 `pnpm run dev` 对源文件进行编译，打开浏览器，创建一个 tiddler ，在其中使用 `<$RandomNumber />`，可以看到效果。

注：框架同时也支持对 cjs、mjs、jsx、tsx 文件的编译。

注：相关 <$text text="TypeScript" /> 类型支持是由 [[tw5-typed|https://github.com/tiddly-gittly/TW5-Typed]] 完成的，由于完成度不高，所以需要像上面一样，做一些手动的类型注解。欢迎各位大佬帮忙完善 tw5-typed ！

! 在 <$text text="TypeScript" /> 脚本中导入其他资源

首先，当一个脚本文件(.ts、.tsx、.jsx、.cjs、.mjs)有其对应的 .meta 文件时，则该脚本文件为编译入口文件，会对其进行编译；而反之，如果一个脚本文件没有 .meta 文件，则不是入口文件，不会对其进行直接编译并打包入插件，但可以被其他脚本文件导入。

在脚本文件中可以正常使用 `import` 引入目录下的其他资源文件，如其他的脚本文件、css 文件、json 文件、图片等资源。在编译时会自动引入和打包这些资源文件。

注意：js 脚本虽然不能作为入口，但是可以被其他脚本文件使用 import 引入。

但需要注意的是，如果一个资源文件已经被某个脚本文件 import，该资源文件就不需要再拥有 .meta 文件了，也就是不需要再主动添加到插件中。否则插件中会出现两份该资源文件，进而引发一些别的问题。

这里我们举两个例子：

添加一个脚本文件 foo.ts：

```typescript
export const foo = 'foo';
```

不要添加其对应的 .meta 文件，而是在 `RandomNumberWidget.ts` 中直接使用 import 引入之即可。

再比如，我们可以用同样的方式创建一个 `bar.css`，并在 `RandomNumberWidget.ts` 中直接使用 import 引入之，也不需要添加 .meta 文件。
