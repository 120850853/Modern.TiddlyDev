title: $:/plugins/Modern.TiddlyDev/doc/tutorials/zh/001-beginning
caption: 安装与简单使用
authors: Sttot(Gk0Wk)
type: text/vnd.tiddlywiki

正式开始前：

* 你应当会使用命令行执行简单的指令；
* 你应当有一款代码编辑软件，而不是全程使用记事本来开发插件，推荐使用 VSCode 并安装 <$text text="TiddlyWiki5" /> Syntax、ESLint Prettier等插件；
* 你应当首先简要了解 git 的相关知识(如 clone、pull、push、add、commit 等)，并安装 git 命令行软件；
* 你应当注册一个 <$text text="GitHub" /> 账号，如果你需要相关自动化构建功能和代码管理的话；
* 你应当了解什么是 npm，并掌握 npm 的常用指令(如 install、run 等)，并安装 <$text text="NodeJS" /> 软件；
* 你最好有过一段时间的 <$text text="TiddlyWiki" /> 使用经验；
* 你可以去了解 HTML、CSS、<$text text="JavaScript" /> 和 <$text text="TypeScript" /> 的相关技术；

非常感谢 mabuqian(马不前) 同学分享的视频，非常的新手向，讲解了一些基本的用法，如果需要可以去看看：

[[b站视频教程|https://www.bilibili.com/video/BV1zR4y12776/]]

! 从一个空的开发模板开始

首先确保你已安装了 git 和 <$text text="NodeJS" /> ，随后请选择你希望创建项目的路径，并确定项目文件夹的名称，并在命令行输入如下指令：

```bash
npx tiddlywiki-plugin-dev@latest init <项目文件夹名称>
```

如果你是中国大陆的开发者，需要一些魔法并且知道我想表达的意思，init 还有两个额外的参数：

* `--repo <模板repo url>` 对 <$text text="GitHub" /> 进行加速，例如[ghproxy.com]等;
* `--npm <npm 镜像源>` 对 npm 进行加速，例如 `http://registry.npmmirror.com`；


<<<
魔法示例：

```
npx tiddlywiki-plugin-dev@latest init --repo https://ghproxy.com/https://github.com/tiddly-gittly/Modern.TiddlyDev.git --npm http://registry.npmmirror.com project
```
<<<

接下来会进行模板项目的下载和各种工具的安装，请稍作等待。如果需要手动下载模板项目，[[可以看这里|https://github.com/tiddly-gittly/Modern.TiddlyDev/tree/template]]。

使用你的代码编辑器打开这个项目文件夹，就可以正式进入插件开发环节了。

注意：在这里需要你选择自己的包管理器，如果你并不清楚应当选择什么，请选择 npm。而若你选择的不是 npm，请将后续教程中任意 npm 命令都替换成你使用的包管理器来执行。

! 体验所见即所得的开发流程

你应该会发现，这个项目中已经有很多存在的文件夹和文件，这里做一些介绍：

* .git 是一个隐藏的文件夹，保存了这个 git 项目的各种信息，删除之后就无法使用 git 指令了；
* .github 是一个隐藏的文件夹，其中保存了 <$text text="GitHub" /> 的 CI/CD 自动化脚本；
* node_modules 是 npm 包的安装路径，可以删除，删除后使用 npm install 重新安装所有 npm 包；
* src 是插件开发的主要目录，其中的每一个文件夹都是一个插件；
* wiki 是开发模式和发布模式所展示的 wiki 项目，用于开发测试，以及文档生成；
* .eslintignore .eslintrc.js 等隐藏文件，以及 package.json 和 tsconfig.json 等都是项目的相关配置文件，如不理解请勿修改；

在 src 中，已经有一个 plugin-name 示例项目，用于演示，你可以通过修改这个项目开始开发，也可以直接删掉它。我们先保留它，直接进入开发模式看看效果，在控制台输入：

```bash
npm run dev
```

如果没有报错，则控制台会显示出一个本地网址(一般是 `http://127.0.0.1:8080`)，使用浏览器浏览此网址，可以看到一个 Wiki 页面，页面首先也会显示本教程。进一步查看可发现，这个 Wiki 安装了插件 `$:/plugins/your-name/plugin-name`。

这个示例插件实现了一个叫 test 的微件，作用是显示一行固定的文字。我们创建一个称为 Test 的 tiddler，在其中使用这个微件：

```
<$test />
```

保存可看到 `This is a widget!` 的字样。

不要关闭浏览器或者开发服务器，尝试修改一下 `src/plugin-name/index.ts` 中第 14 行的文字，保存后即可看到，插件被重新编译，网页上 Test 中的文字随之改变：

[img[$:/plugins/Modern.TiddlyDev/doc/wysiwtg-demo.gif]]

随后，在控制台按 <kbd>ctrl</kbd> + <kbd>C</kbd> 即可停止服务器。

! 编译插件

如果你不想使用 <$text text="GitHub" /> 进行自动化构建和发布，或者只是想先编译一下插件看看，可以使用如下指令：

```bash
npm run build
```

在短暂的编译过程后，控制台会输出类似这样的内容：

```
 Minimized plugins
   1.97 KiB   $:/plugins/your-name/plugin-name
```

代表这次构建共编译打包了一个插件，其压缩后的大小为 1.97KB。我们可以在 `dist` 文件夹下找到它。

! 发布

首先，请使用 git remote 绑定自己的 git 项目（方法请百度）。

在 git push 之后，<$text text="GitHub" /> 项目的自动化构建就开始了，你可以在项目首页的 Actions 中查看构建详情。

一般情况下，自动化构建会生成 wiki 的线上版本，并同时生成包含 src 中所有插件的插件源，你可以将其发布给你的插件订阅者们，他们会在每次自动构建后获得最新的插件更新。

如果你同时为你的提交添加了 tag，且 tag 的格式是 `v1.2.3` 这样的版本格式，那么项目还会将构建后的插件自动发布在你项目的 Release 中，[[就像这样|https://github.com/tiddly-gittly/Modern.TiddlyDev/releases]]。

! 更新

项目中的 `tiddlywiki-plugin-dev` 和 `tw5-typed` 等都会经常进行更新，以修复一些 bug 或者进一步强化功能。因此建议每隔一段时间或者遇到错误时就进行一下更新，方法如下：

在联网状态下执行：

```bash
npm run update
```

在检查之后，按照其指示执行进一步的指令，例如`npm install`。
